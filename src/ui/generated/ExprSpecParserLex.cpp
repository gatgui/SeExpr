#line 2 "ExprSpecParserLexIn.cpp"

#line 4 "ExprSpecParserLexIn.cpp"

#define  SeExprSpecYY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define SeExprSpecYY_FLEX_MAJOR_VERSION 2
#define SeExprSpecYY_FLEX_MINOR_VERSION 5
#define SeExprSpecYY_FLEX_SUBMINOR_VERSION 35
#if SeExprSpecYY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define SeExprSpecYY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define SeExprSpecYY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef SeExprSpecYY_USE_CONST
#define SeExpr2Specconst const
#else
#define SeExpr2Specconst
#endif

/* Returned upon end-of-file. */
#define SeExprSpecYY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define SeExprSpecYY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (SeExpr2Spec_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The SeExprSpecYYSTATE alias is for lex
 * compatibility.
 */
#define SeExprSpecYY_START (((SeExpr2Spec_start) - 1) / 2)
#define SeExprSpecYYSTATE SeExprSpecYY_START

/* Action number for EOF rule of a given start state. */
#define SeExprSpecYY_STATE_EOF(state) (SeExprSpecYY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define SeExprSpecYY_NEW_FILE SeExpr2Specrestart(SeExpr2Specin  )

#define SeExprSpecYY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef SeExprSpecYY_BUF_SIZE
#define SeExprSpecYY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define SeExprSpecYY_STATE_BUF_SIZE   ((SeExprSpecYY_BUF_SIZE + 2) * sizeof(SeExpr2Spec_state_type))

#ifndef SeExprSpecYY_TYPEDEF_SeExprSpecYY_BUFFER_STATE
#define SeExprSpecYY_TYPEDEF_SeExprSpecYY_BUFFER_STATE
typedef struct SeExpr2Spec_buffer_state *SeExprSpecYY_BUFFER_STATE;
#endif

#ifndef SeExprSpecYY_TYPEDEF_SeExprSpecYY_SIZE_T
#define SeExprSpecYY_TYPEDEF_SeExprSpecYY_SIZE_T
typedef size_t SeExpr2Spec_size_t;
#endif

extern SeExpr2Spec_size_t SeExpr2Specleng;

extern FILE *SeExpr2Specin, *SeExpr2Specout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define SeExprSpecYY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define SeExpr2Specless(n) \
	do \
		{ \
		/* Undo effects of setting up SeExpr2Spectext. */ \
        int SeExpr2Specless_macro_arg = (n); \
        SeExprSpecYY_LESS_LINENO(SeExpr2Specless_macro_arg);\
		*SeExpr2Spec_cp = (SeExpr2Spec_hold_char); \
		SeExprSpecYY_RESTORE_SeExprSpecYY_MORE_OFFSET \
		(SeExpr2Spec_c_buf_p) = SeExpr2Spec_cp = SeExpr2Spec_bp + SeExpr2Specless_macro_arg - SeExprSpecYY_MORE_ADJ; \
		SeExprSpecYY_DO_BEFORE_ACTION; /* set up SeExpr2Spectext again */ \
		} \
	while ( 0 )

#define unput(c) SeExpr2Specunput( c, (SeExpr2Spectext_ptr)  )

#ifndef SeExprSpecYY_STRUCT_SeExprSpecYY_BUFFER_STATE
#define SeExprSpecYY_STRUCT_SeExprSpecYY_BUFFER_STATE
struct SeExpr2Spec_buffer_state
	{
	FILE *SeExpr2Spec_input_file;

	char *SeExpr2Spec_ch_buf;		/* input buffer */
	char *SeExpr2Spec_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	SeExpr2Spec_size_t SeExpr2Spec_buf_size;

	/* Number of characters read into SeExpr2Spec_ch_buf, not including EOB
	 * characters.
	 */
	SeExpr2Spec_size_t SeExpr2Spec_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int SeExpr2Spec_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int SeExpr2Spec_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int SeExpr2Spec_at_bol;

    int SeExpr2Spec_bs_lineno; /**< The line count. */
    int SeExpr2Spec_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int SeExpr2Spec_fill_buffer;

	int SeExpr2Spec_buffer_status;

#define SeExprSpecYY_BUFFER_NEW 0
#define SeExprSpecYY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as SeExprSpecYY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via SeExpr2Specrestart()), so that the user can continue scanning by
	 * just pointing SeExpr2Specin at a new input file.
	 */
#define SeExprSpecYY_BUFFER_EOF_PENDING 2

	};
#endif /* !SeExprSpecYY_STRUCT_SeExprSpecYY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t SeExpr2Spec_buffer_stack_top = 0; /**< index of top of stack. */
static size_t SeExpr2Spec_buffer_stack_max = 0; /**< capacity of stack. */
static SeExprSpecYY_BUFFER_STATE * SeExpr2Spec_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define SeExprSpecYY_CURRENT_BUFFER ( (SeExpr2Spec_buffer_stack) \
                          ? (SeExpr2Spec_buffer_stack)[(SeExpr2Spec_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define SeExprSpecYY_CURRENT_BUFFER_LVALUE (SeExpr2Spec_buffer_stack)[(SeExpr2Spec_buffer_stack_top)]

/* SeExpr2Spec_hold_char holds the character lost when SeExpr2Spectext is formed. */
static char SeExpr2Spec_hold_char;
static SeExpr2Spec_size_t SeExpr2Spec_n_chars;		/* number of characters read into SeExpr2Spec_ch_buf */
SeExpr2Spec_size_t SeExpr2Specleng;

/* Points to current character in buffer. */
static char *SeExpr2Spec_c_buf_p = (char *) 0;
static int SeExpr2Spec_init = 0;		/* whether we need to initialize */
static int SeExpr2Spec_start = 0;	/* start state number */

/* Flag which is used to allow SeExpr2Specwrap()'s to do buffer switches
 * instead of setting up a fresh SeExpr2Specin.  A bit of a hack ...
 */
static int SeExpr2Spec_did_buffer_switch_on_eof;

void SeExpr2Specrestart (FILE *input_file  );
void SeExpr2Spec_switch_to_buffer (SeExprSpecYY_BUFFER_STATE new_buffer  );
SeExprSpecYY_BUFFER_STATE SeExpr2Spec_create_buffer (FILE *file,int size  );
void SeExpr2Spec_delete_buffer (SeExprSpecYY_BUFFER_STATE b  );
void SeExpr2Spec_flush_buffer (SeExprSpecYY_BUFFER_STATE b  );
void SeExpr2Specpush_buffer_state (SeExprSpecYY_BUFFER_STATE new_buffer  );
void SeExpr2Specpop_buffer_state (void );

static void SeExpr2Specensure_buffer_stack (void );
static void SeExpr2Spec_load_buffer_state (void );
static void SeExpr2Spec_init_buffer (SeExprSpecYY_BUFFER_STATE b,FILE *file  );

#define SeExprSpecYY_FLUSH_BUFFER SeExpr2Spec_flush_buffer(SeExprSpecYY_CURRENT_BUFFER )

SeExprSpecYY_BUFFER_STATE SeExpr2Spec_scan_buffer (char *base,SeExpr2Spec_size_t size  );
SeExprSpecYY_BUFFER_STATE SeExpr2Spec_scan_string (SeExpr2Specconst char *SeExpr2Spec_str  );
SeExprSpecYY_BUFFER_STATE SeExpr2Spec_scan_bytes (SeExpr2Specconst char *bytes,SeExpr2Spec_size_t len  );

void *SeExpr2Specalloc (SeExpr2Spec_size_t  );
void *SeExpr2Specrealloc (void *,SeExpr2Spec_size_t  );
void SeExpr2Specfree (void *  );

#define SeExpr2Spec_new_buffer SeExpr2Spec_create_buffer

#define SeExpr2Spec_set_interactive(is_interactive) \
	{ \
	if ( ! SeExprSpecYY_CURRENT_BUFFER ){ \
        SeExpr2Specensure_buffer_stack (); \
		SeExprSpecYY_CURRENT_BUFFER_LVALUE =    \
            SeExpr2Spec_create_buffer(SeExpr2Specin,SeExprSpecYY_BUF_SIZE ); \
	} \
	SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_is_interactive = is_interactive; \
	}

#define SeExpr2Spec_set_bol(at_bol) \
	{ \
	if ( ! SeExprSpecYY_CURRENT_BUFFER ){\
        SeExpr2Specensure_buffer_stack (); \
		SeExprSpecYY_CURRENT_BUFFER_LVALUE =    \
            SeExpr2Spec_create_buffer(SeExpr2Specin,SeExprSpecYY_BUF_SIZE ); \
	} \
	SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_at_bol = at_bol; \
	}

#define SeExprSpecYY_AT_BOL() (SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_at_bol)

/* Begin user sect3 */

#define SeExpr2Specwrap(n) 1
#define SeExprSpecYY_SKIP_SeExprSpecYYWRAP

typedef unsigned char SeExprSpecYY_CHAR;

FILE *SeExpr2Specin = (FILE *) 0, *SeExpr2Specout = (FILE *) 0;

typedef int SeExpr2Spec_state_type;

extern int SeExpr2Speclineno;

int SeExpr2Speclineno = 1;

extern char *SeExpr2Spectext;
#define SeExpr2Spectext_ptr SeExpr2Spectext

static SeExpr2Spec_state_type SeExpr2Spec_get_previous_state (void );
static SeExpr2Spec_state_type SeExpr2Spec_try_NUL_trans (SeExpr2Spec_state_type current_state  );
static int SeExpr2Spec_get_next_buffer (void );
static void SeExpr2Spec_fatal_error (SeExpr2Specconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up SeExpr2Spectext.
 */
#define SeExprSpecYY_DO_BEFORE_ACTION \
	(SeExpr2Spectext_ptr) = SeExpr2Spec_bp; \
	SeExpr2Specleng = (SeExpr2Spec_size_t) (SeExpr2Spec_cp - SeExpr2Spec_bp); \
	(SeExpr2Spec_hold_char) = *SeExpr2Spec_cp; \
	*SeExpr2Spec_cp = '\0'; \
	(SeExpr2Spec_c_buf_p) = SeExpr2Spec_cp;

#define SeExprSpecYY_NUM_RULES 34
#define SeExprSpecYY_END_OF_BUFFER 35
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct SeExpr2Spec_trans_info
	{
	flex_int32_t SeExpr2Spec_verify;
	flex_int32_t SeExpr2Spec_nxt;
	};
static SeExpr2Specconst flex_int16_t SeExpr2Spec_accept[115] =
    {   0,
        0,    0,   35,   33,   31,   31,   33,   33,   32,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   23,   33,
       33,   33,   28,   28,   18,   28,   33,   33,   28,   28,
       28,   28,   28,   28,   33,    7,    0,   24,    0,   32,
        0,   26,   15,    5,    0,   25,    0,   13,   11,   12,
       10,   23,   14,   23,   23,    0,    8,    6,    9,   28,
       28,   17,   29,   30,   16,   28,   28,   28,    2,   28,
       28,    4,   24,   26,    0,   25,    0,   23,    0,    0,
       23,   28,   22,   28,   28,   28,   28,    0,    0,   23,
        0,    0,   23,   28,    3,   28,   28,   28,   27,    0,

       23,   28,   28,   28,   28,   27,   28,   28,   19,   20,
        1,   28,   21,    0
    } ;

static SeExpr2Specconst flex_int32_t SeExpr2Spec_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,    1,
        1,   11,   12,    1,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   23,   23,   25,   23,
       26,   23,   27,   23,   23,   23,   23,   28,   23,   29,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
        1,   30,    1,   31,   23,    1,   32,   33,   23,   23,

       34,   35,   36,   37,   38,   23,   23,   39,   40,   41,
       42,   23,   23,   43,   44,   45,   46,   23,   23,   47,
       23,   23,    1,   48,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static SeExpr2Specconst flex_int32_t SeExpr2Spec_meta[49] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    3,    3,    4,    1,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1
    } ;

static SeExpr2Specconst flex_int16_t SeExpr2Spec_base[123] =
    {   0,
        0,    0,  193,  194,  194,  194,  171,   44,  161,    0,
      169,  180,   40,  167,  166,   30,   37,  165,   41,  164,
      163,  162,    0,  157,    0,  154,   15,  159,  137,  139,
      145,  141,  137,  134,  125,  194,   54,  194,   56,  142,
      130,  152,  194,  194,   52,  194,   53,  194,  194,  194,
      194,   51,  194,   55,   74,   80,  194,  194,  194,    0,
      143,    0,  194,  194,  194,  121,  123,  120,    0,  124,
      122,  194,   64,  145,  144,   68,   88,   86,   97,   48,
       90,  134,    0,  126,  115,  124,  115,    0,   99,  101,
      109,  107,  111,  127,    0,  105,  112,   94,    0,  113,

      115,  118,   81,   69,   58,    0,   68,   49,    0,    0,
      194,   38,    0,  194,  132,  137,   72,  142,  145,  148,
       68,  151
    } ;

static SeExpr2Specconst flex_int16_t SeExpr2Spec_def[123] =
    {   0,
      114,    1,  114,  114,  114,  114,  114,  115,  116,  117,
      114,  114,  118,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  119,  119,  119,  119,  114,  114,  119,  119,
      119,  119,  119,  119,  114,  114,  115,  114,  115,  116,
      116,  120,  114,  114,  118,  114,  118,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  119,
      119,  119,  114,  114,  114,  119,  119,  119,  119,  119,
      119,  114,  115,  120,  114,  118,  114,  114,  114,  114,
      114,  119,  119,  119,  119,  119,  119,  121,  114,  114,
      114,  114,  114,  119,  119,  119,  119,  119,  122,  114,

      114,  119,  119,  119,  119,  122,  119,  119,  119,  119,
      114,  119,  119,    0,  114,  114,  114,  114,  114,  114,
      114,  114
    } ;

static SeExpr2Specconst flex_int16_t SeExpr2Spec_nxt[243] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,    4,    4,   20,
       21,   22,   23,   24,   25,   23,   23,   23,   26,   27,
       28,   23,   29,   30,   23,   31,   23,   32,   33,   23,
       23,   23,   23,   34,   23,   23,   23,   35,   38,   46,
       50,   51,   52,   52,   54,   63,   55,   55,   38,   64,
       73,   46,   76,   81,   81,   56,   52,   52,   38,   47,
       78,   78,   99,   39,   56,   77,   42,   46,  113,   79,
      112,   47,   47,   39,   77,   39,  111,   54,   79,   55,
       55,   80,   80,   39,  110,   81,   81,   47,   56,   89,

       89,   78,   78,   90,   90,   81,   81,   56,   92,   92,
       91,  109,   93,   93,   90,   90,   90,   90,  108,   91,
      100,  100,   93,   93,  101,  101,   93,   93,  101,  101,
      101,  101,   37,  107,   37,   37,   37,   40,  105,   40,
       40,   40,   45,  104,   45,   45,   45,   60,  103,   60,
       74,   74,   74,  106,  102,  106,   98,   97,   96,   95,
       94,   88,   75,   87,   86,   85,   84,   83,   82,   75,
      114,   41,   72,   71,   70,   69,   68,   67,   66,   65,
       62,   61,   59,   58,   57,   53,   49,   48,   44,   43,
       41,   36,  114,    3,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114
    } ;

static SeExpr2Specconst flex_int16_t SeExpr2Spec_chk[243] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    8,   13,
       16,   16,   17,   17,   19,   27,   19,   19,   37,   27,
       39,   45,   47,   80,   80,   19,   52,   52,   73,   13,
       54,   54,  121,    8,   19,   52,  117,   76,  112,   54,
      108,   45,   47,   37,   52,   39,  107,   55,   54,   55,
       55,   56,   56,   73,  105,   56,   56,   76,   55,   77,

       77,   78,   78,   77,   77,   81,   81,   55,   79,   79,
       78,  104,   79,   79,   89,   89,   90,   90,  103,   78,
       91,   91,   92,   92,   91,   91,   93,   93,  100,  100,
      101,  101,  115,  102,  115,  115,  115,  116,   98,  116,
      116,  116,  118,   97,  118,  118,  118,  119,   96,  119,
      120,  120,  120,  122,   94,  122,   87,   86,   85,   84,
       82,   75,   74,   71,   70,   68,   67,   66,   61,   42,
       41,   40,   35,   34,   33,   32,   31,   30,   29,   28,
       26,   24,   22,   21,   20,   18,   15,   14,   12,   11,
        9,    7,    3,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114
    } ;

static SeExpr2Spec_state_type SeExpr2Spec_last_accepting_state;
static char *SeExpr2Spec_last_accepting_cpos;

extern int SeExpr2Spec_flex_debug;
int SeExpr2Spec_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define SeExpr2Specmore() SeExpr2Specmore_used_but_not_detected
#define SeExprSpecYY_MORE_ADJ 0
#define SeExprSpecYY_RESTORE_SeExprSpecYY_MORE_OFFSET
char *SeExpr2Spectext;
#line 1 "src/ui/ExprSpecParserLex.l"
/*
* Copyright Disney Enterprises, Inc.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License
* and the following modification to it: Section 6 Trademarks.
* deleted and replaced with:
*
* 6. Trademarks. This License does not grant permission to use the
* trade names, trademarks, service marks, or product names of the
* Licensor and its affiliates, except as required for reproducing
* the content of the NOTICE file.
*
* You may obtain a copy of the License at
* http://www.apache.org/licenses/LICENSE-2.0
*/
/* Don't generate SeExpr2Specwrap since everything is in one string */
/* Don't generate unput since it's unused and gcc complains... */
/* Don't worry about interactive and using isatty(). Fixes Windows compile. */
#line 26 "src/ui/ExprSpecParserLex.l"
#ifndef MAKEDEPEND
#    include <ctype.h>
#    include <string.h>
#    include <string>
#define _USE_MATH_DEFINES
#    include <math.h>
#endif

#include "ExprSpecType.h"

#ifdef SEEXPR_WIN32
#    define SeExprSpecYY_NO_UNISTD_H
#    define SeExprSpecYY_SKIP_SeExprSpecYYWRAP
#endif

#ifndef MAKEDEPEND
#    include "ExprSpecParser.tab.h"
#endif

// TODO: make this thread safe
static int columnNumber=0; // really buffer position
static int lineNumber=0; // not used

static std::vector<std::pair<int,int> >* comments=0;

extern char* specRegisterToken(char* tok);
void specResetCounters(std::vector<std::pair<int,int> >& commentsIn){
   columnNumber=lineNumber=0;
   comments=&commentsIn;
}

int SeExpr2Specpos(); // forward declare


#define SeExprSpecYY_USER_ACTION { \
    SeExpr2Speclloc.first_line=lineNumber;SeExpr2Speclloc.first_column=columnNumber; \
    columnNumber+=SeExpr2Specleng;\
    SeExpr2Speclloc.last_column=columnNumber;SeExpr2Speclloc.last_line=lineNumber;} 

#line 607 "ExprSpecParserLexIn.cpp"

#define INITIAL 0

#ifndef SeExprSpecYY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef SeExprSpecYY_EXTRA_TYPE
#define SeExprSpecYY_EXTRA_TYPE void *
#endif

static int SeExpr2Spec_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int SeExpr2Speclex_destroy (void );

int SeExpr2Specget_debug (void );

void SeExpr2Specset_debug (int debug_flag  );

SeExprSpecYY_EXTRA_TYPE SeExpr2Specget_extra (void );

void SeExpr2Specset_extra (SeExprSpecYY_EXTRA_TYPE user_defined  );

FILE *SeExpr2Specget_in (void );

void SeExpr2Specset_in  (FILE * in_str  );

FILE *SeExpr2Specget_out (void );

void SeExpr2Specset_out  (FILE * out_str  );

SeExpr2Spec_size_t SeExpr2Specget_leng (void );

char *SeExpr2Specget_text (void );

int SeExpr2Specget_lineno (void );

void SeExpr2Specset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef SeExprSpecYY_SKIP_SeExprSpecYYWRAP
#ifdef __cplusplus
extern "C" int SeExpr2Specwrap (void );
#else
extern int SeExpr2Specwrap (void );
#endif
#endif

#ifndef SeExpr2Spectext_ptr
static void SeExpr2Spec_flex_strncpy (char *,SeExpr2Specconst char *,int );
#endif

#ifdef SeExprSpecYY_NEED_STRLEN
static int SeExpr2Spec_flex_strlen (SeExpr2Specconst char * );
#endif

#ifndef SeExprSpecYY_NO_INPUT

#ifdef __cplusplus
static int SeExpr2Specinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef SeExprSpecYY_READ_BUF_SIZE
#define SeExprSpecYY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( SeExpr2Spectext, SeExpr2Specleng, 1, SeExpr2Specout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or SeExprSpecYY_NULL,
 * is returned in "result".
 */
#ifndef SeExprSpecYY_INPUT
#define SeExprSpecYY_INPUT(buf,result,max_size) \
	if ( SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_is_interactive ) \
		{ \
		int c = '*'; \
		SeExpr2Spec_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( SeExpr2Specin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( SeExpr2Specin ) ) \
			SeExprSpecYY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, SeExpr2Specin))==0 && ferror(SeExpr2Specin)) \
			{ \
			if( errno != EINTR) \
				{ \
				SeExprSpecYY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(SeExpr2Specin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "SeExpr2Specterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef SeExpr2Specterminate
#define SeExpr2Specterminate() return SeExprSpecYY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef SeExprSpecYY_START_STACK_INCR
#define SeExprSpecYY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef SeExprSpecYY_FATAL_ERROR
#define SeExprSpecYY_FATAL_ERROR(msg) SeExpr2Spec_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef SeExprSpecYY_DECL
#define SeExprSpecYY_DECL_IS_OURS 1

extern int SeExpr2Speclex (void);

#define SeExprSpecYY_DECL int SeExpr2Speclex (void)
#endif /* !SeExprSpecYY_DECL */

/* Code executed at the beginning of each rule, after SeExpr2Spectext and SeExpr2Specleng
 * have been set up.
 */
#ifndef SeExprSpecYY_USER_ACTION
#define SeExprSpecYY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef SeExprSpecYY_BREAK
#define SeExprSpecYY_BREAK break;
#endif

#define SeExprSpecYY_RULE_SETUP \
	SeExprSpecYY_USER_ACTION

/** The main scanner function which does all the work.
 */
SeExprSpecYY_DECL
{
	register SeExpr2Spec_state_type SeExpr2Spec_current_state;
	register char *SeExpr2Spec_cp, *SeExpr2Spec_bp;
	register int SeExpr2Spec_act;
    
#line 72 "src/ui/ExprSpecParserLex.l"

#line 789 "ExprSpecParserLexIn.cpp"

	if ( !(SeExpr2Spec_init) )
		{
		(SeExpr2Spec_init) = 1;

#ifdef SeExprSpecYY_USER_INIT
		SeExprSpecYY_USER_INIT;
#endif

		if ( ! (SeExpr2Spec_start) )
			(SeExpr2Spec_start) = 1;	/* first start state */

		if ( ! SeExpr2Specin )
			SeExpr2Specin = stdin;

		if ( ! SeExpr2Specout )
			SeExpr2Specout = stdout;

		if ( ! SeExprSpecYY_CURRENT_BUFFER ) {
			SeExpr2Specensure_buffer_stack ();
			SeExprSpecYY_CURRENT_BUFFER_LVALUE =
				SeExpr2Spec_create_buffer(SeExpr2Specin,SeExprSpecYY_BUF_SIZE );
		}

		SeExpr2Spec_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		SeExpr2Spec_cp = (SeExpr2Spec_c_buf_p);

		/* Support of SeExpr2Spectext. */
		*SeExpr2Spec_cp = (SeExpr2Spec_hold_char);

		/* SeExpr2Spec_bp points to the position in SeExpr2Spec_ch_buf of the start of
		 * the current run.
		 */
		SeExpr2Spec_bp = SeExpr2Spec_cp;

		SeExpr2Spec_current_state = (SeExpr2Spec_start);
SeExpr2Spec_match:
		do
			{
			register SeExprSpecYY_CHAR SeExpr2Spec_c = SeExpr2Spec_ec[SeExprSpecYY_SC_TO_UI(*SeExpr2Spec_cp)];
			if ( SeExpr2Spec_accept[SeExpr2Spec_current_state] )
				{
				(SeExpr2Spec_last_accepting_state) = SeExpr2Spec_current_state;
				(SeExpr2Spec_last_accepting_cpos) = SeExpr2Spec_cp;
				}
			while ( SeExpr2Spec_chk[SeExpr2Spec_base[SeExpr2Spec_current_state] + SeExpr2Spec_c] != SeExpr2Spec_current_state )
				{
				SeExpr2Spec_current_state = (int) SeExpr2Spec_def[SeExpr2Spec_current_state];
				if ( SeExpr2Spec_current_state >= 115 )
					SeExpr2Spec_c = SeExpr2Spec_meta[(unsigned int) SeExpr2Spec_c];
				}
			SeExpr2Spec_current_state = SeExpr2Spec_nxt[SeExpr2Spec_base[SeExpr2Spec_current_state] + (unsigned int) SeExpr2Spec_c];
			++SeExpr2Spec_cp;
			}
		while ( SeExpr2Spec_current_state != 114 );
		SeExpr2Spec_cp = (SeExpr2Spec_last_accepting_cpos);
		SeExpr2Spec_current_state = (SeExpr2Spec_last_accepting_state);

SeExpr2Spec_find_action:
		SeExpr2Spec_act = SeExpr2Spec_accept[SeExpr2Spec_current_state];

		SeExprSpecYY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( SeExpr2Spec_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of SeExprSpecYY_DO_BEFORE_ACTION */
			*SeExpr2Spec_cp = (SeExpr2Spec_hold_char);
			SeExpr2Spec_cp = (SeExpr2Spec_last_accepting_cpos);
			SeExpr2Spec_current_state = (SeExpr2Spec_last_accepting_state);
			goto SeExpr2Spec_find_action;

case 1:
SeExprSpecYY_RULE_SETUP
#line 73 "src/ui/ExprSpecParserLex.l"

	SeExprSpecYY_BREAK
case 2:
SeExprSpecYY_RULE_SETUP
#line 75 "src/ui/ExprSpecParserLex.l"
{ return IF; }
	SeExprSpecYY_BREAK
case 3:
SeExprSpecYY_RULE_SETUP
#line 76 "src/ui/ExprSpecParserLex.l"
{ return ELSE; }
	SeExprSpecYY_BREAK
case 4:
SeExprSpecYY_RULE_SETUP
#line 78 "src/ui/ExprSpecParserLex.l"
{ return OR; }
	SeExprSpecYY_BREAK
case 5:
SeExprSpecYY_RULE_SETUP
#line 79 "src/ui/ExprSpecParserLex.l"
{ return AND; }
	SeExprSpecYY_BREAK
case 6:
SeExprSpecYY_RULE_SETUP
#line 80 "src/ui/ExprSpecParserLex.l"
{ return EQ; }
	SeExprSpecYY_BREAK
case 7:
SeExprSpecYY_RULE_SETUP
#line 81 "src/ui/ExprSpecParserLex.l"
{ return NE; }
	SeExprSpecYY_BREAK
case 8:
SeExprSpecYY_RULE_SETUP
#line 82 "src/ui/ExprSpecParserLex.l"
{ return LE; }
	SeExprSpecYY_BREAK
case 9:
SeExprSpecYY_RULE_SETUP
#line 83 "src/ui/ExprSpecParserLex.l"
{ return GE; }
	SeExprSpecYY_BREAK
case 10:
SeExprSpecYY_RULE_SETUP
#line 84 "src/ui/ExprSpecParserLex.l"
{ return ARROW; }
	SeExprSpecYY_BREAK
case 11:
SeExprSpecYY_RULE_SETUP
#line 85 "src/ui/ExprSpecParserLex.l"
{ return AddEq; }
	SeExprSpecYY_BREAK
case 12:
SeExprSpecYY_RULE_SETUP
#line 86 "src/ui/ExprSpecParserLex.l"
{ return SubEq; }
	SeExprSpecYY_BREAK
case 13:
SeExprSpecYY_RULE_SETUP
#line 87 "src/ui/ExprSpecParserLex.l"
{ return MultEq; }
	SeExprSpecYY_BREAK
case 14:
SeExprSpecYY_RULE_SETUP
#line 88 "src/ui/ExprSpecParserLex.l"
{ return DivEq; }
	SeExprSpecYY_BREAK
case 15:
SeExprSpecYY_RULE_SETUP
#line 89 "src/ui/ExprSpecParserLex.l"
{ return ModEq; }
	SeExprSpecYY_BREAK
case 16:
SeExprSpecYY_RULE_SETUP
#line 90 "src/ui/ExprSpecParserLex.l"
{ return ExpEq; }
	SeExprSpecYY_BREAK
case 17:
SeExprSpecYY_RULE_SETUP
#line 92 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.d = M_PI; return NUMBER; }
	SeExprSpecYY_BREAK
case 18:
SeExprSpecYY_RULE_SETUP
#line 93 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.d = M_E; return NUMBER; }
	SeExprSpecYY_BREAK
case 19:
SeExprSpecYY_RULE_SETUP
#line 94 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.d = 0; return NUMBER; }
	SeExprSpecYY_BREAK
case 20:
SeExprSpecYY_RULE_SETUP
#line 95 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.d = 1; return NUMBER; }
	SeExprSpecYY_BREAK
case 21:
SeExprSpecYY_RULE_SETUP
#line 96 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.d = 2; return NUMBER; }
	SeExprSpecYY_BREAK
case 22:
SeExprSpecYY_RULE_SETUP
#line 97 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.d = 3; return NUMBER; }
	SeExprSpecYY_BREAK
case 23:
SeExprSpecYY_RULE_SETUP
#line 99 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.d = atof(SeExpr2Spectext); return NUMBER; }
	SeExprSpecYY_BREAK
case 24:
SeExprSpecYY_RULE_SETUP
#line 100 "src/ui/ExprSpecParserLex.l"
{ /* match quoted string, allow embedded quote, \" */
			  SeExpr2Speclval.s = specRegisterToken(&SeExpr2Spectext[1]); 
			  SeExpr2Speclval.s[strlen(SeExpr2Speclval.s)-1] = '\0';
                          return STR; }
	SeExprSpecYY_BREAK
case 25:
SeExprSpecYY_RULE_SETUP
#line 104 "src/ui/ExprSpecParserLex.l"
{ /* match quoted string, allow embedded quote, \' */
			  SeExpr2Speclval.s = specRegisterToken(&SeExpr2Spectext[1]); 
			  SeExpr2Speclval.s[strlen(SeExpr2Speclval.s)-1] = '\0';
                          return STR; }
	SeExprSpecYY_BREAK
case 26:
SeExprSpecYY_RULE_SETUP
#line 108 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.s = specRegisterToken(&SeExpr2Spectext[1]); return VAR; }
	SeExprSpecYY_BREAK
case 27:
SeExprSpecYY_RULE_SETUP
#line 109 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.s = specRegisterToken(&SeExpr2Spectext[1]); return VAR; }
	SeExprSpecYY_BREAK
case 28:
SeExprSpecYY_RULE_SETUP
#line 110 "src/ui/ExprSpecParserLex.l"
{ SeExpr2Speclval.s = specRegisterToken(SeExpr2Spectext); return NAME; }
	SeExprSpecYY_BREAK
case 29:
SeExprSpecYY_RULE_SETUP
#line 112 "src/ui/ExprSpecParserLex.l"
/* ignore quoted newline */;
	SeExprSpecYY_BREAK
case 30:
SeExprSpecYY_RULE_SETUP
#line 113 "src/ui/ExprSpecParserLex.l"
/* ignore quoted tab */;
	SeExprSpecYY_BREAK
case 31:
/* rule 31 can match eol */
SeExprSpecYY_RULE_SETUP
#line 114 "src/ui/ExprSpecParserLex.l"
/* ignore whitespace */;
	SeExprSpecYY_BREAK
case 32:
SeExprSpecYY_RULE_SETUP
#line 115 "src/ui/ExprSpecParserLex.l"
{ /* match comment */ 
                         int startPos=SeExpr2Specpos(),endPos=SeExpr2Specpos()+strlen(&SeExpr2Spectext[1])+1;
                          comments->push_back(std::pair<int,int>(startPos,endPos));}
	SeExprSpecYY_BREAK
case 33:
SeExprSpecYY_RULE_SETUP
#line 120 "src/ui/ExprSpecParserLex.l"
{ return SeExpr2Spectext[0]; }
	SeExprSpecYY_BREAK
case 34:
SeExprSpecYY_RULE_SETUP
#line 122 "src/ui/ExprSpecParserLex.l"
ECHO;
	SeExprSpecYY_BREAK
#line 1047 "ExprSpecParserLexIn.cpp"
case SeExprSpecYY_STATE_EOF(INITIAL):
	SeExpr2Specterminate();

	case SeExprSpecYY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int SeExpr2Spec_amount_of_matched_text = (int) (SeExpr2Spec_cp - (SeExpr2Spectext_ptr)) - 1;

		/* Undo the effects of SeExprSpecYY_DO_BEFORE_ACTION. */
		*SeExpr2Spec_cp = (SeExpr2Spec_hold_char);
		SeExprSpecYY_RESTORE_SeExprSpecYY_MORE_OFFSET

		if ( SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buffer_status == SeExprSpecYY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed SeExpr2Specin at a new source and called
			 * SeExpr2Speclex().  If so, then we have to assure
			 * consistency between SeExprSpecYY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(SeExpr2Spec_n_chars) = SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_n_chars;
			SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_input_file = SeExpr2Specin;
			SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buffer_status = SeExprSpecYY_BUFFER_NORMAL;
			}

		/* Note that here we test for SeExpr2Spec_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since SeExpr2Spec_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (SeExpr2Spec_c_buf_p) <= &SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[(SeExpr2Spec_n_chars)] )
			{ /* This was really a NUL. */
			SeExpr2Spec_state_type SeExpr2Spec_next_state;

			(SeExpr2Spec_c_buf_p) = (SeExpr2Spectext_ptr) + SeExpr2Spec_amount_of_matched_text;

			SeExpr2Spec_current_state = SeExpr2Spec_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * SeExpr2Spec_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			SeExpr2Spec_next_state = SeExpr2Spec_try_NUL_trans( SeExpr2Spec_current_state );

			SeExpr2Spec_bp = (SeExpr2Spectext_ptr) + SeExprSpecYY_MORE_ADJ;

			if ( SeExpr2Spec_next_state )
				{
				/* Consume the NUL. */
				SeExpr2Spec_cp = ++(SeExpr2Spec_c_buf_p);
				SeExpr2Spec_current_state = SeExpr2Spec_next_state;
				goto SeExpr2Spec_match;
				}

			else
				{
				SeExpr2Spec_cp = (SeExpr2Spec_last_accepting_cpos);
				SeExpr2Spec_current_state = (SeExpr2Spec_last_accepting_state);
				goto SeExpr2Spec_find_action;
				}
			}

		else switch ( SeExpr2Spec_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(SeExpr2Spec_did_buffer_switch_on_eof) = 0;

				if ( SeExpr2Specwrap( ) )
					{
					/* Note: because we've taken care in
					 * SeExpr2Spec_get_next_buffer() to have set up
					 * SeExpr2Spectext, we can now set up
					 * SeExpr2Spec_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * SeExprSpecYY_NULL, it'll still work - another
					 * SeExprSpecYY_NULL will get returned.
					 */
					(SeExpr2Spec_c_buf_p) = (SeExpr2Spectext_ptr) + SeExprSpecYY_MORE_ADJ;

					SeExpr2Spec_act = SeExprSpecYY_STATE_EOF(SeExprSpecYY_START);
					goto do_action;
					}

				else
					{
					if ( ! (SeExpr2Spec_did_buffer_switch_on_eof) )
						SeExprSpecYY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(SeExpr2Spec_c_buf_p) =
					(SeExpr2Spectext_ptr) + SeExpr2Spec_amount_of_matched_text;

				SeExpr2Spec_current_state = SeExpr2Spec_get_previous_state(  );

				SeExpr2Spec_cp = (SeExpr2Spec_c_buf_p);
				SeExpr2Spec_bp = (SeExpr2Spectext_ptr) + SeExprSpecYY_MORE_ADJ;
				goto SeExpr2Spec_match;

			case EOB_ACT_LAST_MATCH:
				(SeExpr2Spec_c_buf_p) =
				&SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[(SeExpr2Spec_n_chars)];

				SeExpr2Spec_current_state = SeExpr2Spec_get_previous_state(  );

				SeExpr2Spec_cp = (SeExpr2Spec_c_buf_p);
				SeExpr2Spec_bp = (SeExpr2Spectext_ptr) + SeExprSpecYY_MORE_ADJ;
				goto SeExpr2Spec_find_action;
			}
		break;
		}

	default:
		SeExprSpecYY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of SeExpr2Speclex */

/* SeExpr2Spec_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int SeExpr2Spec_get_next_buffer (void)
{
    	register char *dest = SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf;
	register char *source = (SeExpr2Spectext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (SeExpr2Spec_c_buf_p) > &SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[(SeExpr2Spec_n_chars) + 1] )
		SeExprSpecYY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (SeExpr2Spec_c_buf_p) - (SeExpr2Spectext_ptr) - SeExprSpecYY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((SeExpr2Spec_c_buf_p) - (SeExpr2Spectext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buffer_status == SeExprSpecYY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_n_chars = (SeExpr2Spec_n_chars) = 0;

	else
		{
			SeExpr2Spec_size_t num_to_read =
			SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			SeExprSpecYY_BUFFER_STATE b = SeExprSpecYY_CURRENT_BUFFER;

			int SeExpr2Spec_c_buf_p_offset =
				(int) ((SeExpr2Spec_c_buf_p) - b->SeExpr2Spec_ch_buf);

			if ( b->SeExpr2Spec_is_our_buffer )
				{
				SeExpr2Spec_size_t new_size = b->SeExpr2Spec_buf_size * 2;

				if ( new_size <= 0 )
					b->SeExpr2Spec_buf_size += b->SeExpr2Spec_buf_size / 8;
				else
					b->SeExpr2Spec_buf_size *= 2;

				b->SeExpr2Spec_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SeExpr2Specrealloc((void *) b->SeExpr2Spec_ch_buf,b->SeExpr2Spec_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->SeExpr2Spec_ch_buf = 0;

			if ( ! b->SeExpr2Spec_ch_buf )
				SeExprSpecYY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(SeExpr2Spec_c_buf_p) = &b->SeExpr2Spec_ch_buf[SeExpr2Spec_c_buf_p_offset];

			num_to_read = SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > SeExprSpecYY_READ_BUF_SIZE )
			num_to_read = SeExprSpecYY_READ_BUF_SIZE;

		/* Read in more data. */
		SeExprSpecYY_INPUT( (&SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[number_to_move]),
			(SeExpr2Spec_n_chars), num_to_read );

		SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_n_chars = (SeExpr2Spec_n_chars);
		}

	if ( (SeExpr2Spec_n_chars) == 0 )
		{
		if ( number_to_move == SeExprSpecYY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			SeExpr2Specrestart(SeExpr2Specin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buffer_status =
				SeExprSpecYY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((SeExpr2Spec_size_t) ((SeExpr2Spec_n_chars) + number_to_move) > SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		SeExpr2Spec_size_t new_size = (SeExpr2Spec_n_chars) + number_to_move + ((SeExpr2Spec_n_chars) >> 1);
		SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf = (char *) SeExpr2Specrealloc((void *) SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf,new_size  );
		if ( ! SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf )
			SeExprSpecYY_FATAL_ERROR( "out of dynamic memory in SeExpr2Spec_get_next_buffer()" );
	}

	(SeExpr2Spec_n_chars) += number_to_move;
	SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[(SeExpr2Spec_n_chars)] = SeExprSpecYY_END_OF_BUFFER_CHAR;
	SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[(SeExpr2Spec_n_chars) + 1] = SeExprSpecYY_END_OF_BUFFER_CHAR;

	(SeExpr2Spectext_ptr) = &SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[0];

	return ret_val;
}

/* SeExpr2Spec_get_previous_state - get the state just before the EOB char was reached */

    static SeExpr2Spec_state_type SeExpr2Spec_get_previous_state (void)
{
	register SeExpr2Spec_state_type SeExpr2Spec_current_state;
	register char *SeExpr2Spec_cp;
    
	SeExpr2Spec_current_state = (SeExpr2Spec_start);

	for ( SeExpr2Spec_cp = (SeExpr2Spectext_ptr) + SeExprSpecYY_MORE_ADJ; SeExpr2Spec_cp < (SeExpr2Spec_c_buf_p); ++SeExpr2Spec_cp )
		{
		register SeExprSpecYY_CHAR SeExpr2Spec_c = (*SeExpr2Spec_cp ? SeExpr2Spec_ec[SeExprSpecYY_SC_TO_UI(*SeExpr2Spec_cp)] : 1);
		if ( SeExpr2Spec_accept[SeExpr2Spec_current_state] )
			{
			(SeExpr2Spec_last_accepting_state) = SeExpr2Spec_current_state;
			(SeExpr2Spec_last_accepting_cpos) = SeExpr2Spec_cp;
			}
		while ( SeExpr2Spec_chk[SeExpr2Spec_base[SeExpr2Spec_current_state] + SeExpr2Spec_c] != SeExpr2Spec_current_state )
			{
			SeExpr2Spec_current_state = (int) SeExpr2Spec_def[SeExpr2Spec_current_state];
			if ( SeExpr2Spec_current_state >= 115 )
				SeExpr2Spec_c = SeExpr2Spec_meta[(unsigned int) SeExpr2Spec_c];
			}
		SeExpr2Spec_current_state = SeExpr2Spec_nxt[SeExpr2Spec_base[SeExpr2Spec_current_state] + (unsigned int) SeExpr2Spec_c];
		}

	return SeExpr2Spec_current_state;
}

/* SeExpr2Spec_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = SeExpr2Spec_try_NUL_trans( current_state );
 */
    static SeExpr2Spec_state_type SeExpr2Spec_try_NUL_trans  (SeExpr2Spec_state_type SeExpr2Spec_current_state )
{
	register int SeExpr2Spec_is_jam;
    	register char *SeExpr2Spec_cp = (SeExpr2Spec_c_buf_p);

	register SeExprSpecYY_CHAR SeExpr2Spec_c = 1;
	if ( SeExpr2Spec_accept[SeExpr2Spec_current_state] )
		{
		(SeExpr2Spec_last_accepting_state) = SeExpr2Spec_current_state;
		(SeExpr2Spec_last_accepting_cpos) = SeExpr2Spec_cp;
		}
	while ( SeExpr2Spec_chk[SeExpr2Spec_base[SeExpr2Spec_current_state] + SeExpr2Spec_c] != SeExpr2Spec_current_state )
		{
		SeExpr2Spec_current_state = (int) SeExpr2Spec_def[SeExpr2Spec_current_state];
		if ( SeExpr2Spec_current_state >= 115 )
			SeExpr2Spec_c = SeExpr2Spec_meta[(unsigned int) SeExpr2Spec_c];
		}
	SeExpr2Spec_current_state = SeExpr2Spec_nxt[SeExpr2Spec_base[SeExpr2Spec_current_state] + (unsigned int) SeExpr2Spec_c];
	SeExpr2Spec_is_jam = (SeExpr2Spec_current_state == 114);

	return SeExpr2Spec_is_jam ? 0 : SeExpr2Spec_current_state;
}

#ifndef SeExprSpecYY_NO_INPUT
#ifdef __cplusplus
    static int SeExpr2Specinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(SeExpr2Spec_c_buf_p) = (SeExpr2Spec_hold_char);

	if ( *(SeExpr2Spec_c_buf_p) == SeExprSpecYY_END_OF_BUFFER_CHAR )
		{
		/* SeExpr2Spec_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (SeExpr2Spec_c_buf_p) < &SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_ch_buf[(SeExpr2Spec_n_chars)] )
			/* This was really a NUL. */
			*(SeExpr2Spec_c_buf_p) = '\0';

		else
			{ /* need more input */
			SeExpr2Spec_size_t offset = (SeExpr2Spec_c_buf_p) - (SeExpr2Spectext_ptr);
			++(SeExpr2Spec_c_buf_p);

			switch ( SeExpr2Spec_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because SeExpr2Spec_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					SeExpr2Specrestart(SeExpr2Specin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( SeExpr2Specwrap( ) )
						return 0;

					if ( ! (SeExpr2Spec_did_buffer_switch_on_eof) )
						SeExprSpecYY_NEW_FILE;
#ifdef __cplusplus
					return SeExpr2Specinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(SeExpr2Spec_c_buf_p) = (SeExpr2Spectext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (SeExpr2Spec_c_buf_p);	/* cast for 8-bit char's */
	*(SeExpr2Spec_c_buf_p) = '\0';	/* preserve SeExpr2Spectext */
	(SeExpr2Spec_hold_char) = *++(SeExpr2Spec_c_buf_p);

	return c;
}
#endif	/* ifndef SeExprSpecYY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void SeExpr2Specrestart  (FILE * input_file )
{
    
	if ( ! SeExprSpecYY_CURRENT_BUFFER ){
        SeExpr2Specensure_buffer_stack ();
		SeExprSpecYY_CURRENT_BUFFER_LVALUE =
            SeExpr2Spec_create_buffer(SeExpr2Specin,SeExprSpecYY_BUF_SIZE );
	}

	SeExpr2Spec_init_buffer(SeExprSpecYY_CURRENT_BUFFER,input_file );
	SeExpr2Spec_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void SeExpr2Spec_switch_to_buffer  (SeExprSpecYY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		SeExpr2Specpop_buffer_state();
	 *		SeExpr2Specpush_buffer_state(new_buffer);
     */
	SeExpr2Specensure_buffer_stack ();
	if ( SeExprSpecYY_CURRENT_BUFFER == new_buffer )
		return;

	if ( SeExprSpecYY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(SeExpr2Spec_c_buf_p) = (SeExpr2Spec_hold_char);
		SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buf_pos = (SeExpr2Spec_c_buf_p);
		SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_n_chars = (SeExpr2Spec_n_chars);
		}

	SeExprSpecYY_CURRENT_BUFFER_LVALUE = new_buffer;
	SeExpr2Spec_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (SeExpr2Specwrap()) processing, but the only time this flag
	 * is looked at is after SeExpr2Specwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(SeExpr2Spec_did_buffer_switch_on_eof) = 1;
}

static void SeExpr2Spec_load_buffer_state  (void)
{
    	(SeExpr2Spec_n_chars) = SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_n_chars;
	(SeExpr2Spectext_ptr) = (SeExpr2Spec_c_buf_p) = SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buf_pos;
	SeExpr2Specin = SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_input_file;
	(SeExpr2Spec_hold_char) = *(SeExpr2Spec_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c SeExprSpecYY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    SeExprSpecYY_BUFFER_STATE SeExpr2Spec_create_buffer  (FILE * file, int  size )
{
	SeExprSpecYY_BUFFER_STATE b;
    
	b = (SeExprSpecYY_BUFFER_STATE) SeExpr2Specalloc(sizeof( struct SeExpr2Spec_buffer_state )  );
	if ( ! b )
		SeExprSpecYY_FATAL_ERROR( "out of dynamic memory in SeExpr2Spec_create_buffer()" );

	b->SeExpr2Spec_buf_size = size;

	/* SeExpr2Spec_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->SeExpr2Spec_ch_buf = (char *) SeExpr2Specalloc(b->SeExpr2Spec_buf_size + 2  );
	if ( ! b->SeExpr2Spec_ch_buf )
		SeExprSpecYY_FATAL_ERROR( "out of dynamic memory in SeExpr2Spec_create_buffer()" );

	b->SeExpr2Spec_is_our_buffer = 1;

	SeExpr2Spec_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with SeExpr2Spec_create_buffer()
 * 
 */
    void SeExpr2Spec_delete_buffer (SeExprSpecYY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == SeExprSpecYY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		SeExprSpecYY_CURRENT_BUFFER_LVALUE = (SeExprSpecYY_BUFFER_STATE) 0;

	if ( b->SeExpr2Spec_is_our_buffer )
		SeExpr2Specfree((void *) b->SeExpr2Spec_ch_buf  );

	SeExpr2Specfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a SeExpr2Specrestart() or at EOF.
 */
    static void SeExpr2Spec_init_buffer  (SeExprSpecYY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	SeExpr2Spec_flush_buffer(b );

	b->SeExpr2Spec_input_file = file;
	b->SeExpr2Spec_fill_buffer = 1;

    /* If b is the current buffer, then SeExpr2Spec_init_buffer was _probably_
     * called from SeExpr2Specrestart() or through SeExpr2Spec_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != SeExprSpecYY_CURRENT_BUFFER){
        b->SeExpr2Spec_bs_lineno = 1;
        b->SeExpr2Spec_bs_column = 0;
    }

        b->SeExpr2Spec_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, SeExprSpecYY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c SeExprSpecYY_CURRENT_BUFFER.
 * 
 */
    void SeExpr2Spec_flush_buffer (SeExprSpecYY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->SeExpr2Spec_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->SeExpr2Spec_ch_buf[0] = SeExprSpecYY_END_OF_BUFFER_CHAR;
	b->SeExpr2Spec_ch_buf[1] = SeExprSpecYY_END_OF_BUFFER_CHAR;

	b->SeExpr2Spec_buf_pos = &b->SeExpr2Spec_ch_buf[0];

	b->SeExpr2Spec_at_bol = 1;
	b->SeExpr2Spec_buffer_status = SeExprSpecYY_BUFFER_NEW;

	if ( b == SeExprSpecYY_CURRENT_BUFFER )
		SeExpr2Spec_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void SeExpr2Specpush_buffer_state (SeExprSpecYY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	SeExpr2Specensure_buffer_stack();

	/* This block is copied from SeExpr2Spec_switch_to_buffer. */
	if ( SeExprSpecYY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(SeExpr2Spec_c_buf_p) = (SeExpr2Spec_hold_char);
		SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_buf_pos = (SeExpr2Spec_c_buf_p);
		SeExprSpecYY_CURRENT_BUFFER_LVALUE->SeExpr2Spec_n_chars = (SeExpr2Spec_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (SeExprSpecYY_CURRENT_BUFFER)
		(SeExpr2Spec_buffer_stack_top)++;
	SeExprSpecYY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from SeExpr2Spec_switch_to_buffer. */
	SeExpr2Spec_load_buffer_state( );
	(SeExpr2Spec_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void SeExpr2Specpop_buffer_state (void)
{
    	if (!SeExprSpecYY_CURRENT_BUFFER)
		return;

	SeExpr2Spec_delete_buffer(SeExprSpecYY_CURRENT_BUFFER );
	SeExprSpecYY_CURRENT_BUFFER_LVALUE = NULL;
	if ((SeExpr2Spec_buffer_stack_top) > 0)
		--(SeExpr2Spec_buffer_stack_top);

	if (SeExprSpecYY_CURRENT_BUFFER) {
		SeExpr2Spec_load_buffer_state( );
		(SeExpr2Spec_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void SeExpr2Specensure_buffer_stack (void)
{
	SeExpr2Spec_size_t num_to_alloc;
    
	if (!(SeExpr2Spec_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(SeExpr2Spec_buffer_stack) = (struct SeExpr2Spec_buffer_state**)SeExpr2Specalloc
								(num_to_alloc * sizeof(struct SeExpr2Spec_buffer_state*)
								);
		if ( ! (SeExpr2Spec_buffer_stack) )
			SeExprSpecYY_FATAL_ERROR( "out of dynamic memory in SeExpr2Specensure_buffer_stack()" );
								  
		memset((SeExpr2Spec_buffer_stack), 0, num_to_alloc * sizeof(struct SeExpr2Spec_buffer_state*));
				
		(SeExpr2Spec_buffer_stack_max) = num_to_alloc;
		(SeExpr2Spec_buffer_stack_top) = 0;
		return;
	}

	if ((SeExpr2Spec_buffer_stack_top) >= ((SeExpr2Spec_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (SeExpr2Spec_buffer_stack_max) + grow_size;
		(SeExpr2Spec_buffer_stack) = (struct SeExpr2Spec_buffer_state**)SeExpr2Specrealloc
								((SeExpr2Spec_buffer_stack),
								num_to_alloc * sizeof(struct SeExpr2Spec_buffer_state*)
								);
		if ( ! (SeExpr2Spec_buffer_stack) )
			SeExprSpecYY_FATAL_ERROR( "out of dynamic memory in SeExpr2Specensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((SeExpr2Spec_buffer_stack) + (SeExpr2Spec_buffer_stack_max), 0, grow_size * sizeof(struct SeExpr2Spec_buffer_state*));
		(SeExpr2Spec_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
SeExprSpecYY_BUFFER_STATE SeExpr2Spec_scan_buffer  (char * base, SeExpr2Spec_size_t  size )
{
	SeExprSpecYY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != SeExprSpecYY_END_OF_BUFFER_CHAR ||
	     base[size-1] != SeExprSpecYY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (SeExprSpecYY_BUFFER_STATE) SeExpr2Specalloc(sizeof( struct SeExpr2Spec_buffer_state )  );
	if ( ! b )
		SeExprSpecYY_FATAL_ERROR( "out of dynamic memory in SeExpr2Spec_scan_buffer()" );

	b->SeExpr2Spec_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->SeExpr2Spec_buf_pos = b->SeExpr2Spec_ch_buf = base;
	b->SeExpr2Spec_is_our_buffer = 0;
	b->SeExpr2Spec_input_file = 0;
	b->SeExpr2Spec_n_chars = b->SeExpr2Spec_buf_size;
	b->SeExpr2Spec_is_interactive = 0;
	b->SeExpr2Spec_at_bol = 1;
	b->SeExpr2Spec_fill_buffer = 0;
	b->SeExpr2Spec_buffer_status = SeExprSpecYY_BUFFER_NEW;

	SeExpr2Spec_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to SeExpr2Speclex() will
 * scan from a @e copy of @a str.
 * @param SeExpr2Specstr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       SeExpr2Spec_scan_bytes() instead.
 */
SeExprSpecYY_BUFFER_STATE SeExpr2Spec_scan_string (SeExpr2Specconst char * SeExpr2Specstr )
{
    
	return SeExpr2Spec_scan_bytes(SeExpr2Specstr,strlen(SeExpr2Specstr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to SeExpr2Speclex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
SeExprSpecYY_BUFFER_STATE SeExpr2Spec_scan_bytes  (SeExpr2Specconst char * SeExpr2Specbytes, SeExpr2Spec_size_t  _SeExpr2Specbytes_len )
{
	SeExprSpecYY_BUFFER_STATE b;
	char *buf;
	SeExpr2Spec_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _SeExpr2Specbytes_len + 2;
	buf = (char *) SeExpr2Specalloc(n  );
	if ( ! buf )
		SeExprSpecYY_FATAL_ERROR( "out of dynamic memory in SeExpr2Spec_scan_bytes()" );

	for ( i = 0; i < _SeExpr2Specbytes_len; ++i )
		buf[i] = SeExpr2Specbytes[i];

	buf[_SeExpr2Specbytes_len] = buf[_SeExpr2Specbytes_len+1] = SeExprSpecYY_END_OF_BUFFER_CHAR;

	b = SeExpr2Spec_scan_buffer(buf,n );
	if ( ! b )
		SeExprSpecYY_FATAL_ERROR( "bad buffer in SeExpr2Spec_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->SeExpr2Spec_is_our_buffer = 1;

	return b;
}

#ifndef SeExprSpecYY_EXIT_FAILURE
#define SeExprSpecYY_EXIT_FAILURE 2
#endif

static void SeExpr2Spec_fatal_error (SeExpr2Specconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( SeExprSpecYY_EXIT_FAILURE );
}

/* Redefine SeExpr2Specless() so it works in section 3 code. */

#undef SeExpr2Specless
#define SeExpr2Specless(n) \
	do \
		{ \
		/* Undo effects of setting up SeExpr2Spectext. */ \
        int SeExpr2Specless_macro_arg = (n); \
        SeExprSpecYY_LESS_LINENO(SeExpr2Specless_macro_arg);\
		SeExpr2Spectext[SeExpr2Specleng] = (SeExpr2Spec_hold_char); \
		(SeExpr2Spec_c_buf_p) = SeExpr2Spectext + SeExpr2Specless_macro_arg; \
		(SeExpr2Spec_hold_char) = *(SeExpr2Spec_c_buf_p); \
		*(SeExpr2Spec_c_buf_p) = '\0'; \
		SeExpr2Specleng = SeExpr2Specless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int SeExpr2Specget_lineno  (void)
{
        
    return SeExpr2Speclineno;
}

/** Get the input stream.
 * 
 */
FILE *SeExpr2Specget_in  (void)
{
        return SeExpr2Specin;
}

/** Get the output stream.
 * 
 */
FILE *SeExpr2Specget_out  (void)
{
        return SeExpr2Specout;
}

/** Get the length of the current token.
 * 
 */
SeExpr2Spec_size_t SeExpr2Specget_leng  (void)
{
        return SeExpr2Specleng;
}

/** Get the current token.
 * 
 */

char *SeExpr2Specget_text  (void)
{
        return SeExpr2Spectext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void SeExpr2Specset_lineno (int  line_number )
{
    
    SeExpr2Speclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see SeExpr2Spec_switch_to_buffer
 */
void SeExpr2Specset_in (FILE *  in_str )
{
        SeExpr2Specin = in_str ;
}

void SeExpr2Specset_out (FILE *  out_str )
{
        SeExpr2Specout = out_str ;
}

int SeExpr2Specget_debug  (void)
{
        return SeExpr2Spec_flex_debug;
}

void SeExpr2Specset_debug (int  bdebug )
{
        SeExpr2Spec_flex_debug = bdebug ;
}

static int SeExpr2Spec_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from SeExpr2Speclex_destroy(), so don't allocate here.
     */

    (SeExpr2Spec_buffer_stack) = 0;
    (SeExpr2Spec_buffer_stack_top) = 0;
    (SeExpr2Spec_buffer_stack_max) = 0;
    (SeExpr2Spec_c_buf_p) = (char *) 0;
    (SeExpr2Spec_init) = 0;
    (SeExpr2Spec_start) = 0;

/* Defined in main.c */
#ifdef SeExprSpecYY_STDINIT
    SeExpr2Specin = stdin;
    SeExpr2Specout = stdout;
#else
    SeExpr2Specin = (FILE *) 0;
    SeExpr2Specout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * SeExpr2Speclex_init()
     */
    return 0;
}

/* SeExpr2Speclex_destroy is for both reentrant and non-reentrant scanners. */
int SeExpr2Speclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(SeExprSpecYY_CURRENT_BUFFER){
		SeExpr2Spec_delete_buffer(SeExprSpecYY_CURRENT_BUFFER  );
		SeExprSpecYY_CURRENT_BUFFER_LVALUE = NULL;
		SeExpr2Specpop_buffer_state();
	}

	/* Destroy the stack itself. */
	SeExpr2Specfree((SeExpr2Spec_buffer_stack) );
	(SeExpr2Spec_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * SeExpr2Speclex() is called, initialization will occur. */
    SeExpr2Spec_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef SeExpr2Spectext_ptr
static void SeExpr2Spec_flex_strncpy (char* s1, SeExpr2Specconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef SeExprSpecYY_NEED_STRLEN
static int SeExpr2Spec_flex_strlen (SeExpr2Specconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SeExpr2Specalloc (SeExpr2Spec_size_t  size )
{
	return (void *) malloc( size );
}

void *SeExpr2Specrealloc  (void * ptr, SeExpr2Spec_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SeExpr2Specfree (void * ptr )
{
	free( (char *) ptr );	/* see SeExpr2Specrealloc() for (char *) cast */
}

#define SeExprSpecYYTABLES_NAME "SeExpr2Spectables"

#line 122 "src/ui/ExprSpecParserLex.l"



/* Gets index of current token (corresponding to SeExpr2Spectext).  
   Used for error reporting.
 */
int SeExpr2Specpos()
{
    return SeExpr2Spec_c_buf_p - SeExprSpecYY_CURRENT_BUFFER->SeExpr2Spec_ch_buf - SeExpr2Specleng;
}

